#!/usr/bin/env bash

# Functions
scalevideo()
{
  # Might find a way to make this GPU Accelerated
  ffmpeg -i "${POSITIONAL_ARGS[0]}" -vf scale=${scaleres}:flags=lanczos -c:v h264 -preset slow -crf 20 "${stripname}-scaled.mkv"
  exit 0
}

mergeaudio()
{
  # Might find a way to make this less complicated
  ffmpeg -i "${POSITIONAL_ARGS[0]}" -i "${POSITIONAL_ARGS[1]}" -filter_complex "[0:a][1:a]amerge=inputs=2[a]" -map 0:v -map "[a]" -c:v copy -c:a aac -ac 2 "${stripname}-merged.mkv"
  exit 0
}

cutvideo()
{
  ffmpeg -i "${POSITIONAL_ARGS[0]}" -ss "${startframe}" -to "${endframe}" -c copy "${stripname}-cut.mkv"
  exit 0
}

fadevideo()
{
  ffmpeg -i "${POSITIONAL_ARGS[0]}" -vf fade=d=0.5,fade=out:st=${endframe}:d=0.5 -af afade=d=0.5,afade=out:st=${endframe}:d=0.5 "${stripname}-faded.mkv"
  exit 0
}

helpmsg()
{
  echo -e "[-s] - scale video \
    \n[-m] - merge video and audio \
    \n[-c] - cut video"
	exit 1
}

# Get Arguments
singleflag=0
POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
	case $1 in
	  -m|--merge) merger=true
  		((singleflag += 1))
      shift
	    ;;
	  -s|--scale) scaler=true
  		((singleflag += 1))
      shift
	    ;;
	  -c|--cut) cutter=true
  		((singleflag += 1))
	    shift
	    ;;
	  -f|--fade) fader=true
  		((singleflag += 1))
	    shift
	    ;;
	-* | --*) helpmsg ;;
	*)
		POSITIONAL_ARGS+=("$1")
		shift
		;;
	esac
done

set -- "${POSITIONAL_ARGS[@]}"

# Static Variable
stripname=$(echo "${POSITIONAL_ARGS[0]}" | rev | cut -b 5- | rev) # Hard strip for 3 letter ext

# Flag Check
[ $singleflag = 1 ] || helpmsg

# Print Debug Info
echo ">> Debug Info"
echo ">> arg0: ${POSITIONAL_ARGS[0]}"
echo ">> arg1: ${POSITIONAL_ARGS[1]}"
echo ">> arg2: ${POSITIONAL_ARGS[2]}"
echo ">> strip: $stripname"
echo ">> res: $scaleres"
echo ">> scaler: $scaler merger: $merger cut: $cutter fade: $fader"
echo

# Main Program
[ $merger ] && mergeaudio
[ $scaler ] && {
  [ -z "${POSITIONAL_ARGS[1]}" ] && read -r -p "New video resolution (1280x720): " scaleres
  [ "${POSITIONAL_ARGS[1]}" ] && scaleres="${POSITIONAL_ARGS[1]}"
  [ -z "$scaleres" ] && exit 1
  scalevideo 
}
[ $cutter ] && {
  [ -z "${POSITIONAL_ARGS[1]}" ] && [ -z "${POSITIONAL_ARGS[2]}" ] && {
    read -r -p "Starting point for cut (hh:mm:ss.mmm): " startframe
    read -r -p "Ending point for cut (hh:mm:ss.mmm): " endframe
  }
  [ "${POSITIONAL_ARGS[1]}" ] && startframe="${POSITIONAL_ARGS[1]}"
  [ "${POSITIONAL_ARGS[2]}" ] && endframe="${POSITIONAL_ARGS[2]}"
  [ -z "$startframe" ] && exit 1
  [ -z "$endframe" ] && exit 1
  cutvideo
}
[ $fader ] && {
  [ -z "${POSITIONAL_ARGS[1]}" ] && {
    read -r -p "Video length (seconds): " endframe
  }
  [ "${POSITIONAL_ARGS[1]}" ] && endframe="${POSITIONAL_ARGS[1]}"
  [ -z "$endframe" ] && exit 1
  fadevideo
}
